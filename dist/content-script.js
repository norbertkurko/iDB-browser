console.log("IndexedDB Explorer content script loaded");class A{async getDatabases(){try{console.log("Getting databases...");const s=await indexedDB.databases();console.log("Raw databases:",s);const t=[];for(const e of s)try{console.log(`Processing database: ${e.name}`);const a=await this.openDatabase(e.name),o=Array.from(a.objectStoreNames);console.log(`Database ${e.name} has stores:`,o),t.push({name:e.name,version:e.version||1,stores:o,storeCount:o.length}),a.close()}catch(a){console.error(`Error accessing database ${e.name}:`,a),t.push({name:e.name,version:e.version||1,stores:[],storeCount:0})}return console.log("Final databases result:",t),t}catch(s){return console.error("Error getting databases:",s),[]}}async getDatabaseStores(s){try{console.log(`Getting stores for database: ${s}`);const t=await this.openDatabase(s),e=[];for(let a=0;a<t.objectStoreNames.length;a++){const o=t.objectStoreNames[a];console.log(`Processing store: ${o}`);try{const i=t.transaction([o],"readonly").objectStore(o),h=[];for(let u=0;u<i.indexNames.length;u++){const b=i.indexNames[u],f=i.index(b);h.push({name:b,keyPath:f.keyPath,unique:f.unique,multiEntry:f.multiEntry})}const m=i.count(),g=await new Promise((u,b)=>{m.onsuccess=()=>{console.log(`Store ${o} has ${m.result} records`),u(m.result)},m.onerror=()=>u(0)});e.push({name:o,keyPath:i.keyPath,autoIncrement:i.autoIncrement,indexes:h,recordCount:g})}catch(c){console.error(`Error getting store info for ${o}:`,c),e.push({name:o,keyPath:null,autoIncrement:!1,indexes:[],recordCount:0})}}return t.close(),console.log(`Stores for ${s}:`,e),e}catch(t){return console.error("Error getting database stores:",t),[]}}async getTableData(s,t,e={}){try{console.log(`Getting table data for ${s}.${t}`,e);const a=await this.openDatabase(s),c=a.transaction([t],"readonly").objectStore(t),i=[];for(let l=0;l<c.indexNames.length;l++){const d=c.indexNames[l],n=c.index(d);i.push({name:d,keyPath:n.keyPath,unique:n.unique,multiEntry:n.multiEntry})}const h={name:t,keyPath:c.keyPath,autoIncrement:c.autoIncrement,indexes:i,recordCount:0},m=await new Promise((l,d)=>{const n=c.count();n.onsuccess=()=>l(n.result),n.onerror=()=>d(n.error)});h.recordCount=m;let g=await new Promise((l,d)=>{const n=c.getAll();n.onsuccess=()=>l(n.result||[]),n.onerror=()=>d(n.error)});if(e.search&&e.search.trim()){const l=e.search.toLowerCase(),d=e.searchField;g=g.filter(n=>{if(d){const E=this.getNestedValue(n,d);return String(E).toLowerCase().includes(l)}else return this.searchInAllFields(n,l)})}const u=e.limit||50,b=e.offset||0,f=g.slice(b,b+u);return a.close(),{data:f,totalCount:g.length,schema:h}}catch(a){throw console.error("Error getting table data:",a),a}}async openDatabase(s,t){return new Promise((e,a)=>{const o=indexedDB.open(s,t);o.onsuccess=()=>e(o.result),o.onerror=()=>a(o.error),o.onblocked=()=>a(new Error("Database blocked")),o.onupgradeneeded=()=>{}})}getNestedValue(s,t){return t.split(".").reduce((e,a)=>e&&e[a]!==void 0?e[a]:"",s)}searchInAllFields(s,t){const e=a=>a==null?!1:typeof a=="object"?Object.values(a).some(e):String(a).toLowerCase().includes(t);return e(s)}async getSampleData(s,t,e=3){try{return(await this.getTableData(s,t,{limit:e})).data}catch(a){return console.error("Error getting sample data:",a),[]}}}const D=new A;chrome.runtime.onMessage.addListener((r,s,t)=>(console.log("Content script received message:",r),(async()=>{try{switch(r.action){case"GET_DATABASES":console.log("Processing GET_DATABASES");const e=await D.getDatabases();t({success:!0,data:e});break;case"GET_DATABASE_STORES":if(console.log("Processing GET_DATABASE_STORES for:",r.dbName),!r.dbName){t({success:!1,error:"Database name is required"});return}const a=await D.getDatabaseStores(r.dbName);t({success:!0,data:a});break;case"GET_TABLE_DATA":if(console.log("Processing GET_TABLE_DATA for:",r.dbName,r.storeName),!r.dbName||!r.storeName){t({success:!1,error:"Database name and store name are required"});return}const o=await D.getTableData(r.dbName,r.storeName,r.options||{});t({success:!0,data:o});break;case"GET_SAMPLE_DATA":if(console.log("Processing GET_SAMPLE_DATA for:",r.dbName,r.storeName),!r.dbName||!r.storeName){t({success:!1,error:"Database name and store name are required"});return}const c=await D.getSampleData(r.dbName,r.storeName,r.sampleSize||3);t({success:!0,data:c});break;default:console.error("Unknown action:",r.action),t({success:!1,error:"Unknown action: "+r.action})}}catch(e){console.error("Content script error:",e),t({success:!1,error:e instanceof Error?e.message:"Unknown error"})}})(),!0));
